HIBERNATE
=========
1) ORM tool - Object-relational mapping
2) Used in data layer
3) Implements JPA -  Set of instructions to follow the java standard (Java Persistent API)
		JPA standard is the standard specified for persistance implementation by a standard body
boiler plate code

Problems
=========
- Mapping the member variables to columns
- Mapping relationship (handling the dependency between the tables ie., keys)
- Handling data type 
- Managing change to object state


Add the binaries

Hibernate way
-------------
1) JDBC database configuration
2) Model object creation - Annotation
3) Service method to create model object and send to Hibernate API
4) Database design is not needed - Hibernate does this for you
5) DAO method is  not needed


Start Coding
------------
I)
- Create a file, hibernate.cfg.xm - default name

	Dialect - language to connect with a database
LIst the annotated class in the resource
II)
- Create the model	
	1) make the class entity - making it the class has an entity and has to be saved
	2) id annotation -  marking the field of object as primary key
III)
- Use the Hibernate api to send the data
	Using the hibernate api in the DAO layer, which get the object from the service layer, the data can be stored in the DB
	- Create a session factory :will be created only once for an application, session object will be created 
	- create a session
	- use session to save object
	
	
Config file
------------
hbm2dll - create will create a new schema
@Entity(name="Table_Name")
@Column(name="COL_NAME") 
@Table (name="Table_Name")

Entity and table are same, but will have impact while coding. Will get to know later
Entity is an object, which contains data which has to be saved in the DB. It has a meaning on its own

Have control over the data type

@Basic - treats the field name as persisted and matched a datatype with db (DEFAULT)
	- fetch
	- optional
@Transient - If we dont want to add a column into db
@Temporal - Has enumerations to display only date or time (TemporalType.Date)
@Lob - Large Objects either BLOB(ByteStream) or CLOB (Character)

Retrieval of Model Objects
===========================
session.get(class, args ie.,primary key value)


Natural and Surrogate keys
==========================
Natural keys - has influence over the business logic (eg., mailid or user id)
Surrogate - just unique but no business use. kind of like s.no

@GeneratedValue - Auto generate a sequence
	-	strategy - GenerationType Auto, sequence, Identity, Table 
	
Hibernate Tutorial 08 - Value Types and Embedding Objects
=========================================================
We'll learn the difference between Entity type objects and Value type objects. We'll use the @Embeddable annotations to embed a value type object into our Entity class.

Entity has meaning on its own, VO adds the meaning to an entity
(User)								(User's address)

@Embeddable - the entity which should be embedded into other entity
@Embedded - the embedded entity (not mandatory)

either one of this is mandatory

Hibernate Tutorial 09 - AttributeOverrides and Embedded Object Keys
======================================================================
In this video, we'll learn how to override configuration inside embedded objects, and we'll also explore object keys.

Overriding the attribute names
In the last one we used multi level entities.

In order to use different name for same type of objects, we have to override the name
@AttributeOverride (name="name of the member variable, column = @Column(name="the name needed"))
All AttributeOverride must be nested inside the @AttributeOverrides({})

If in the case of primary key, we cant use both @Id and @Embeddable in same place. Instead we can use @EmbeddableId, which does the same purpose

Hibernate Tutorial 10 - Saving Collections
===========================================
@ElementCollection - to mark the entire collection object

Insert a collection. Create a set of address and add it.
Annotate it with @ElementCollection - new table will be creaetd with a foreign key
To change the name use @CollectionTable(name="name")

Hibernate Tutorial 11 - Configuring Collections and Adding Keys
===============================================================
More configuration options for collections, including configuring primary keys.

Changing the collection table name using @JointTable(name="NAME)
Change the foreign key name  using @JointTable(name="NAME, joinColumns=@JoinColumns(name="USER_ID"))
@CollectionTable and @JoinTable does the same

	Hibernate annotations
	---------------------
	To create index for the collection tables, we can use Hibernate annotation, which JPA does not provide
	@CollectionId(columns ={(@Column="NAME"}),generator="hilo-gen",type=@Type(type="long"))
	Naming the collectionId and mentioning the type and specifying a generator
	@GenericGenerator(name="hilo-gen",strategy="hilo)
	
Hibernate Tutorial 12 - Proxy Objects and Eager and Lazy Fetch Types
=====================================================================
Hibernate manages data fetching and optimizations using proxy objects. In this tutorial, we'll learn what they are and how lazy initialization works.

Lazy initialization fetches only the list of data when it is requested. this is the default config, to limit the resource wastage
We can load all the data by using eager initialization

This is done by Proxy class - Dynamic sub class of actual Object
	Instead of handing over the requested object, the hibernate gives us back the proxy object of the original object which has the first level values
	When the list is requested, before the user's get method, proxy object fetches the data and gives to the original object
	
	@ElementCollection(fetch=fetchType.EAGER)

Hibernate Tutorial 13 - One To One Mapping
===========================================
If it was an VO, we could embed it, since it is an entity it has to be handled differently

@OneToOne and add the instance of the object to user while saving
But you have to save the instance of the new entity also, or else it will be taken as Transient by Hibernate

First table will be created, second will be created. Then the second table's primmary key is updated into table1
Renaming the columns is as before @JoinColumn(name="NEW_NAME")

eg: one user brings one vehicle

Hibernate Tutorial 14 - One To Many Mapping
===========================================
eg: Any type of vehicle may multiple users ( no of cars owned)
eg: One user having multiple set of vehicles

@OneToMany - Creates the two tables and creates a third table showing the reelation between the two

We can change the names using joinColumns and inverseJoinColumns
@JoinTable(name="Relation_TABLE_NAME", joinColumns=@JoinColumn(name="PRIMARY_KEY_FIRST), inverseJoinColumns=@JoinColumn(name="PRIMARY_KEY_SECOND"))

MANYTOONE
---------
	The inverse can be done, in the second entity. Ex: user can be found from the type of vehicle
	So that the second table has the information about the user of the vehicle
	
	Many vehicle can be used by one users, so mapping the vehichles with respect to users
	So that the second table has the information about the user of the vehicle
	
Combining the both we can acheive Bidirectional relationship

Hibernate Tutorial 15 - mappedBy and Many To Many Mapping
==========================================================
Instead of creating a new table for showing the relation between the tables, we can use mappedBy
@OneToMany(mappedBy="the field to be mapped")
and in @ManyToOne, rename the column name

@ManyToMany annotaion to be used in both the table collections, it will create two different realtion table, one of that will be redundant
To avoid that, you could just use the mappedBy in one of the annotations to skip the redundant table
Then use same, JoinTable, joinColumns and inverseJoinColumns to change the names

Hibernate Tutorial 16 - CascadeTypes and Other Things
==========================================================
@NotFound annotation helps in handling the not found exception when getting the data from session

	Hibernate collection
	--------------------
	Bag semantic - list/arraylist
	Bag semantic with id - list/arraylist
	List semantic - list/arraylist - can be sorted
	Set semantic - set
	Map semantic - map
	
Already faced an issue, if there is an entity is there, we need to manually save the related entity also.
To avoid that, tell hibernate, that add all the related entities, we can use the cascade optioon in OneToMany
 @OneToMany(cascade=CascadeType.PERSIST) and change the method from save to persist the session
 session.persist()
 
 Cascade all is another enum to apply all the prop
 
 
Hibernate Tutorial 17 - Implementing Inheritance
==========================================================

Single tabel Strategy

When a class(entity) is extended, it will create a single table strategy with Dtype in a single table, stoing the discriminator type of the extended table and both the values
vehicle contains, id, name, and dtype with two/four wheel info in two diff cols

Hibernate Tutorial 18 - Implementing Inheritance - Single Table Strategy
==========================================================================
Everything to one table

@Inheritance under the enityt is also not mandatory for STS
@Inheritance(strategy=InheritanceType.SINGLE) not mandatory this is default
Now changing the DTYPE name @DiscriminatorColumn(name="VEHICLE_TYPE", discriminatorType=DiscriminatorType.String)
Also the DTYPE value can be changed using the @DiscriminatorValue("Value") is the column value

Hibernate Tutorial 19 - Implementing Inheritance With Table Per Class Strategy
==========================================================================
Parent data is duplicated to child

What if we need separate table for all the vehicle types instead of STS

We can change the Inheritance strategy to TABLE_PER_CLASS

faced an issue, keepting the gen type of the id should be set to table instead of auto

Two tables created with relation to the parent, so no blank, with parent realtion

Hibernate Tutorial 20 - Implementing Inheritance With Joined Strategy
======================================================================
Parent have core property inherited by child. Child has its own content

The problem with the above method is, it'll create extra data of the parent table in child. To avoid this we can use joined strategy
This will add all the parent information from the child to parent and only the child information to child table

Data can be extracted using join the tables

Hibernate Tutorial 21 - CRUD Operations
=======================================
Create - session.save(obj)
Update - session.update(obj)
Delete - session.delete(obj)
Read -  seeeion.get(class, pk)

Hibernate Tutorial 22 - Transient, Persistent and Detached Objects
==================================================================
Before saving the session, all object are transient to Hibernate
Before closing the sessin, if we do some change to the object, the final modification to the object willl be taken into consideration
eventhough if we dont use session.update()

Before save, the object will be in Transient state
any change to Persistent object reflects in DB - After save
once session is closed it'll become Detached object

Hibernate Tutorial 24 - Persisting Detached Objects
====================================================
After closing the session, the detached object can be persisted using create a new session and save the same object
By this way, after the first session, in the second session the hibernate will do the update, whether or not if there is any change in the object
To avoid this, we have a hibernate annotation @org.hibernate.annotaion.Entity(selectBeforeUpdate=true) which will do a select before the update

Hibernate Tutorial 25 - Introducing HQL and the Query Object
============================================================
use session.createQuery() to cerate a query
"from ClassName where variableName = value" this will give a Query Object from Hibernate package
Then list object is created from that query.list()

Hibernate Tutorial 26 - Select and Pagination in HQL
====================================================
query.setFirstResult(val)
query.setMaxResult(val)
Provides offset - Start point +1 with number of results

We can also write the query in createQuery "Select username from table"

Hibernate Tutorial 27 - Understanding Parameter Binding and SQL Injection
=========================================================================
Parameter Substitution

We can have where condition from paramaeter adnd can also build sql query 
Parameter binding can be used by having question marks and using
query.setInteger(0,int value);
another type is instead of ?, we can name it. where name = :username
query.setString(username, "Name")

Hibernate Tutorial 28 - Named Queries
======================================
We'll learn about named queries and how to write and access named queries. We'll also write and execute a NamedNativeQuery.

Consolidating all queries in one place

we can name the query in one place under the entity
@NamedQuery(name="table.name", query="hql query")
we can call this by Query query = session.getNamedQuery("table.name") and setting the parameter value
@NamedNativeQuery is one in wwhic we can write the native sql with full syntax and in ther resultClass we can set the result class name
@NamedQuery(name="table.name", query="sql query", resultClass=className.class)

Hibernate Tutorial 29 - Introduction to Criteria API
====================================================
third mmethod of data manipulation is Criteria API,

Just create a criteria for a class
Criteria criteria = session.createCriteria(classname);
citeria.add(Restrictions.eq("variable","value"));

Hibernate Tutorial 30 - Understanding Restrictions
==================================================
Similar to "and" in SQL

We can append to the restrictions without adding creating new criterias for the same class.
citeria.add(Restrictions.eq("variable","value"))
		.add(Restrictions.gt("variable","value"));
		
lt, le, gt, ge, ilike, between		

If "OR" is needed

You have to add "or" restrictions
criteria.add(Restrictions.or(Restrictions.between("userId", 1, 3),Restrictions.between("userId", 7, 10)));

Hibernate Tutorial 31 - Projections and Query By Example
========================================================
Grouping functions - like maximum or minimum

in the criteria itself, instead of whole table, we can limit and manipulate it
Projections.property("col")
Criteria criteria = session.createCriteria("class")
	.setProjection(Projections.count("var")); -- has the count value
	similarly distinct, min, max, avg, sum more functionalities are there

Query by example-  if you are specific about finding a specific row. we can create an example object and give it to criteria
it will find that for us. NOTE: It'll skip null values and avoid the primary key columns

exampUser is a user object

Example ex = Example.create(exampUser);
pass this ex to criteria by session.createCriteria("class").add(ex);

We can exclude the properties by adding excludeProperty("variableName") method
Also enableLike() to use like

Hibernate Tutorial 32 - Cacheing in Hibernate
=============================================
First level cache - session
Second level cache - across session in an application
					-	across application
					- across clusters

If the object is not in the second level cache only hibernate talks to db

Hibernate Tutorial 33 - Configuring Second Level Cache					
========================================================
<property name="cache.use.second_level_cache">true</property>
<property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>

Then download the jars for the respective providers and add in class path
Until u mention the entity to be cached, there will be no caching

@Cacheable
Caching strategy = @Cache(usage=CacheConcurrencyStrategy.ENUM) - org.hibernate
Read only - oLY reading
read write - also write cache
transacitonal, 
nonSTRICT_READ_WRITE - not so strict

Hibernate Tutorial 34 - Using Query Cache
=========================================
1) Session Cache
2) Second level 
3) Query cache

Enable use.query.cache in properties
and have to set the query cacheable during the execution
query.setCacheable(true)
